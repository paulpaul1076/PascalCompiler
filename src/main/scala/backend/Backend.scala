package backend

import intermediate.{ICode, SymTab, SymTabStack}
import message.{Message, MessageHandler, MessageListener, MessageProducer}

/**
 * Abstract backend component, to be extended as a specific backend.
 */
abstract class Backend extends MessageProducer {

  /**
   * Symbol table.
   */
  protected var symTab: SymTab = _

  /**
   * Symbol table stack.
   */
  protected var symTabStack: SymTabStack = _

  /**
   * Intermediate code.
   */
  protected var iCode: ICode = _

  /**
   * Process the intermediate code and the symbol table generated by the parser.
   * To be implemented by a compiler or an interpreter subclass.
   *
   * @param iCode       the intermediate code.
   * @param symTabStack the symbol table stack.
   */
  def process(iCode: ICode, symTabStack: SymTabStack): Unit

  /**
   * Add listener to the listener list.
   *
   * @param listener to be added.
   */
  override def addMessageListener(listener: MessageListener): Unit = {
    Backend.messageHandler.addMessageListener(listener)
  }

  /**
   * Remove message listener from the listener list.
   *
   * @param listener to be removed.
   */
  override def removeMessageListener(listener: MessageListener): Unit = {
    Backend.messageHandler.removeMessageListener(listener)
  }

  /**
   * Notify listeners after setting the message.
   *
   * @param message the message to set.
   */
  override def sendMessage(message: Message): Unit = {
    Backend.messageHandler.sendMessage(message)
  }
}

/**
 * Companion object for the backend component.
 */
object Backend {
  protected val messageHandler = new MessageHandler
}