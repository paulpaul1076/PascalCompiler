package backend.interpreter

import backend.Backend
import backend.interpreter.executors.StatementExecutor
import intermediate.{ICode, SymTab, SymTabStack}
import message.{Message, MessageListener, MessageType}

/**
 * Interpreter backend.
 */
class Executor(parent: Executor) extends Backend {
  /**
   * Process the intermediate code and the symbol table generated by the parser.
   * To be implemented by a compiler or an interpreter subclass.
   *
   * @param iCode       the intermediate code.
   * @param symTabStack the symbol table.
   */
  override def process(iCode: ICode, symTabStack: SymTabStack): Unit = {
    this.symTabStack = symTabStack
    this.iCode = iCode

    val startTime = System.currentTimeMillis()

    // Get the root node of the intermediate code and execute.
    val rootNode = iCode.getRoot
    val statementExecutor = new StatementExecutor(this)
    statementExecutor.execute(rootNode)

    val elapsedTime = (System.currentTimeMillis() - startTime) / 1000f
    val runtimeErrors = Executor.errorHandler.getErrorCount

    // Send the interpreter summary message.
    sendMessage(new Message(MessageType.INTERPRETER_SUMMARY, List[Any](Executor.executionCount, runtimeErrors, elapsedTime)))
  }
}

/**
 * Companion object.
 */
protected object Executor {
  var executionCount = 0
  val errorHandler = new RuntimeErrorHandler
}
